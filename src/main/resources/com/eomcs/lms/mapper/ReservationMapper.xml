<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eomcs.lms.dao.ReservationDao">

  <resultMap type="reservation" id="reservationMap">
    <id column="reservation_id" property="no" />
    <result column="reservation_date" property="reservationDate" />
    <result column="payment_date" property="paymentDate" />
     <result column="payment_id" property="paymentNo" />
      <result column="requirement" property="requirement" />
      <result column="tourist_tel" property="touristTel" />
       <result column="personnel" property="personnel" />
       <result column="tour_date" property="tourDate" />
        <result column="status_id" property="statusNo" />
         <result column="member_id" property="memberNo" />
         <result column="tour_id" property="tourNo" />
         <result column="buyer_name" property="buyerName" />
         <result column="cancel_reason" property="cancelReason" />
         
   
  
   
 <association property="tour" javaType="tour">
    <id column="tour_id" property="no" />
    <result column="title" property="title" />
    <result column="price" property="price" />
 </association>

  <association property="paymentStatus" javaType="paymentStatus">
    <id column="status_id" property="no" />
    <result column="status" property="status" />
  
 </association>
 
   <association property="member" javaType="member">
    <id column="member_id" property="no" />
    <result column="name" property="name" />
  
 </association>
  </resultMap>

  <sql id="default-columns">
    reservation_id,
    reservation_date
  </sql>

  <select id="findAll" resultMap="reservationMap" parameterType="map">
   select 
   r.reservation_id, 
   r.tour_id,
   t.title,
   r.tour_date,
   r.buyer_name,
   r.personnel,
   r.tourist_tel,
   r.requirement,
   r.reservation_date,
   r.payment_id,
   r.payment_date,
   r.cancel_reason,
   m.name,
   s.status
 from reservation as r
 join member as m on r.member_id = m.member_id 
 join payment_status as s on r.status_id = s.status_id
 left outer join tour as t on r.tour_id = t.tour_id
    <where>
      <if test="search != null">
        <bind name="pattern1" value="'%' + search + '%'" />
        (m.name like #{pattern1}
        or s.status like #{pattern1}
        or r.reservation_date like #{pattern1})
      </if>
       <if test="tourNo != null">
       and r.tour_id = #{tourNo}
      </if>
      <if test="tourDate != null">
      and r.tour_date = #{tourDate}
      </if>
    </where>
    ORDER BY r.reservation_id DESC 
    <if test="#{size != null || rowNo != null}">
      limit #{rowNo}, #{size}
    </if>
   
  </select>

<select id="myReservation" resultMap="reservationMap" parameterType="int">
    select t.title,r.reservation_id
     from 
     reservation r, tour t 
     where 
     r.tour_id = t.tour_id 
     and  
     r.member_id =  #{value}
  </select>

  <select id="findByNo" resultMap="reservationMap" parameterType="int">
    select
    *
    from reservation r, payment_status s, member m, tour t
    where
    r.reservation_id = #{value}
    and r.member_id = m.member_id
    and r.status_id = s.status_id
    and r.tour_id = t.tour_id 
    and r.member_id = m.member_id
  </select>

  <insert id="insert" parameterType="reservation">
    insert into reservation(
   tour_id,
   member_id,
   status_id,
   tour_date,
   personnel,
   tourist_tel,
   requirement,
   payment_id,
    buyer_name)
    values(
    #{tourNo},
    #{memberNo},
    1,
    #{tourDate},
    #{personnel},
    #{touristTel},
    #{requirement},
    #{paymentNo},
     #{buyerName})
  </insert>

  <update id="update" parameterType="reservation">
    update reservation
    <set>
      <if test="tourDate != null">tour_date = #{tourDate},</if>
      <if test="personnel != 0">personnel = #{personnel},</if>
      <if test="touristTel != null">tourist_tel = #{touristTel},</if>
      <if test="requirement != null"> requirement = #{requirement},</if>
      <if test="statusNo != null">status_id = #{statusNo},</if>
      <if test="cancelReason != null">cancel_reason = #{cancelReason}</if>
    </set>
    where
    reservation_id = #{no}
  </update>

  <delete id="delete" parameterType="int">
    delete from reservation
    where reservation_id = #{value}
  </delete>

  <select id="countAll" resultType="int" parameterType="map">
<!--     select count(*)
    from reservation r, member m, payment_status s -->
    select count(*)
    from reservation as r
    left outer join member as m on r.member_id = m.member_id
    left outer join payment_status as s on r.status_id = s.status_id
    <where>
      <if test="search != null">
        <bind name="pattern1" value="'%' + search + '%'" />
          (m.name like #{pattern1}
        or s.status like #{pattern1}
        or r.reservation_date like #{pattern1})
      </if>
      <if test="tourNo != null">
      and tour_id = #{tourNo}
      </if>
    <if test="tourDate != null">
      and r.tour_date = #{tourDate}
      </if>
    </where>
  </select>
  
  <!-- find reservation by member no and completed ready reservation status-->
  <select id="findByCompletedReservation" resultMap="reservationMap" parameterType="map">
    select * from reservation as r 
    join tour as t on r.tour_id = t.tour_id
    join payment_status as p on p.status_id = r.status_id
    where member_id = #{memberNo} and date(tour_date) >= date(now());
  </select>
  
  <select id="findByOldReservation" resultMap="reservationMap" parameterType="map">
    select * from reservation as r 
    join tour as t on r.tour_id = t.tour_id
    join payment_status as p on p.status_id = r.status_id
    where member_id = #{memberNo} and (r.status_id = 1 or r.status_id = 6) and date(tour_date) <![CDATA[ < ]]> date(now());
  </select> 
  
  <select id="findAllTour" resultMap="reservationMap">
  select distinct
  r.tour_id, t.title
  from reservation as r
  left outer join tour as t on r.tour_id = t.tour_id
  </select>
  
</mapper>










